
type Guest {
  id: ID!
  addedBy: String!
  firstName: String!
  lastName: String!
  attendingDates: String!
  foodPreferences: String
  notes: String
  createdAt: AWSDateTime!
  updatedAt: AWSDateTime!
}

input ModelStringInput {
  ne: String
  eq: String
  le: String
  lt: String
  ge: String
  gt: String
  contains: String
  notContains: String
  between: [String]
  beginsWith: String
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
  size: ModelSizeInput
}

input ModelIntInput {
  ne: Int
  eq: Int
  le: Int
  lt: Int
  ge: Int
  gt: Int
  between: [Int]
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
}

input ModelFloatInput {
  ne: Float
  eq: Float
  le: Float
  lt: Float
  ge: Float
  gt: Float
  between: [Float]
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
}

input ModelBooleanInput {
  ne: Boolean
  eq: Boolean
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
}

input ModelIDInput {
  ne: ID
  eq: ID
  le: ID
  lt: ID
  ge: ID
  gt: ID
  contains: ID
  notContains: ID
  between: [ID]
  beginsWith: ID
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
  size: ModelSizeInput
}

enum ModelAttributeTypes {
  binary
  binarySet
  bool
  list
  map
  number
  numberSet
  string
  stringSet
  _null
}

input ModelSizeInput {
  ne: Int
  eq: Int
  le: Int
  lt: Int
  ge: Int
  gt: Int
  between: [Int]
}

enum ModelSortDirection {
  ASC
  DESC
}

type ModelGuestConnection {
  items: [Guest]!
  nextToken: String
}

input ModelGuestFilterInput {
  id: ModelIDInput
  addedBy: ModelStringInput
  firstName: ModelStringInput
  lastName: ModelStringInput
  attendingDates: ModelStringInput
  foodPreferences: ModelStringInput
  notes: ModelStringInput
  and: [ModelGuestFilterInput]
  or: [ModelGuestFilterInput]
  not: ModelGuestFilterInput
}

type Query {
  getGuest(id: ID!): Guest
  listGuests(filter: ModelGuestFilterInput, limit: Int, nextToken: String): ModelGuestConnection
}

input ModelGuestConditionInput {
  addedBy: ModelStringInput
  firstName: ModelStringInput
  lastName: ModelStringInput
  attendingDates: ModelStringInput
  foodPreferences: ModelStringInput
  notes: ModelStringInput
  and: [ModelGuestConditionInput]
  or: [ModelGuestConditionInput]
  not: ModelGuestConditionInput
}

input CreateGuestInput {
  id: ID
  addedBy: String!
  firstName: String!
  lastName: String!
  attendingDates: String!
  foodPreferences: String
  notes: String
}

input UpdateGuestInput {
  id: ID!
  addedBy: String
  firstName: String
  lastName: String
  attendingDates: String
  foodPreferences: String
  notes: String
}

input DeleteGuestInput {
  id: ID!
}

type Mutation {
  createGuest(input: CreateGuestInput!, condition: ModelGuestConditionInput): Guest
  updateGuest(input: UpdateGuestInput!, condition: ModelGuestConditionInput): Guest
  deleteGuest(input: DeleteGuestInput!, condition: ModelGuestConditionInput): Guest
}

type Subscription {
  onCreateGuest: Guest @aws_subscribe(mutations: ["createGuest"])
  onUpdateGuest: Guest @aws_subscribe(mutations: ["updateGuest"])
  onDeleteGuest: Guest @aws_subscribe(mutations: ["deleteGuest"])
}

